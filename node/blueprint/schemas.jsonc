// - schemas.jsonc
// @o This jsonc file contains the structure that I want to do for the API repsonse and inputs, which will be converted to a Pydantic model later on, see schemas.py for the exact implementation.
{
  "schemas": [
    // - TRANSACTIONS SCHEMA.
    {
      "tx_hash": "0xCCCCCCCC", // Automatically computed with tx_hash as None.

      "action": "", // Resolved to TransactionActions
      "category": "", // Resolves to TransactionCategory.
      "status": "", // Resolved to TransactionStatus

      "payload": {
        // Resolves to TransactionContent
      },
      "signatures": {
        "raw": "",
        "payload": ""
      },

      "from_address": "", // This is resolved only when action is P2P.
      "to_address": "", // This is resolved only when action is P2P.
      "prev_hash_ref": "", // The previous transaction hash that reflects from this hash.
      "timestamp": "" // Resolved to datetime.
    },

    // - SCHEMA FOR BLOCKCHAIN
    // - This will be under the AES form, when unlocked, should be the following output.
    {
      // # For the instance of register.
      // ! There's nothing to hide here I guess?
      "info_": {
        "role": "str",
        "new_address": "str",
        "timestamp": "str"
      },

      // # For the instance of genesis.
      "info__": {
        "block_genesis_no": "",
        "generator_address": "",
        "time_delivery": ""
      },

      // # For the instance of certificate,
      "info___": {
        "reqestor_address": "", // Who will receive the the certificate.
        "timestamp": "" // Who made the certificate.
      },

      // # For the instance of consensus.
      // - Sync
      "info____": {
        "addr": "",
        "timestamp": ""
      },

      // - Consensus, Mine Consensus
      "info_____": {
        "candidate_no": "nth miner to be called",
        "consensus_negotiation_id": "",
        "miner_address": "",
        "master_address": ""
      },

      // - Consensus, Receive Miner Proof
      "info______": {
        "consensus_negotiation_id": "",
        "block_hash": "",
        "time_delivery": ""
      }
    },

    // ! These payloads will be overwritten whenever
    // - EMPLOYMENT | PAYLOAD SCHEMA.
    {
      // We don't know how to search for them. We can basically bind their address in the MASTER's database.
      "applicant": {
        "identity": "", // As address. Should be assert by to on tx_hash section.
        "institution_ref": "", // We can basically refer to the ID of association from the table database. Should be resolved when inserted the company.
        "course": "", // IF APPLICABLE.
        "year": "", // IF APPLICABLE | We cannot create a custom enum for this.
        "prefer-role": "", // We cannot create a custom enum for this.
        "log": {
          "type": "", // Resolves to PROJECTS | ACTIVITIES | PROMOTION | EMPLOYMENT.
          "name": "",
          "description": "Employed at something.",
          "role": "", // Can be None.
          "file": "path?",
          "duration_start": "",
          "duration_end": "", // If this was not specified, assume ongoing.
          "validated_by": "" // An address. Should be assert `from` on tx_hash_section.
        },
        "extra": {
          "title": "",
          "description": "",
          "inserted_by": "",
          "timestamp": ""
        }
      }
    },
    // - SCHOOL | ORGANIZATION | PAYLOAD SCHEMA.
    {
      "school | associate/organization | company": {
        "org_type": "", // ^^
        "founded": "", // int
        "description": "", // text
        "associations": {
          // Can be none.
          "address": ""
        },
        "extra": {
          "title": "",
          "description": "",
          "inserted_by": "",
          "timestamp": ""
        }
      }
    }
  ]
}
